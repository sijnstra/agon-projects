Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED17-Sep-25     09:04:03     page:   1


PC     Object              I  Line    Source 
                           A     1    ; CHARIO hex utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra (c) Jan
                           A     5    ;
                           A     6    ; Purpose: Demonstrate terminal mode entry and 
                           A     7    ;			showing the hex values for input ke
                           A     8    ;			Escape is captured and shown as an 
                           A     9    ;			displayed literally. This is mainly
                           A    10    ;			keys return.
                           A    11    ; Note: Exit requires Console8 vdp 2.2.1, and d
                           A    12    ;
                           A    13    ; Notable changes for reference:
                           A    14    ; required colons on all labels
                           A    15    ; labels are case sensitive
                           A    16    ; code is a reserved word and can't be used as 
                           A    17    ; numeric evaluations are done differently - ch
                           A    18    ; reserved word INCLUDE needs to be in upper ca
                           A    19    ; assembly source MUST be .asm, can't use e.g. 
                           A    20    ; supports defb as a synonym for db, but NOT de
                           A    21    ; labels can't start with @
                           A    22    ;
                           A    23    
       000000C0            A    24    UART0_PORT		EQU	%C0		; UART0
                           A    25    				
       000000C0            A    26    UART0_REG_RBR:		EQU	UART0_PORT+0	; Recei
       000000C0            A    27    UART0_REG_THR:		EQU	UART0_PORT+0	; Trans
       000000C0            A    28    UART0_REG_DLL:		EQU	UART0_PORT+0	; Divis
       000000C1            A    29    UART0_REG_IER:		EQU	UART0_PORT+1	; Inter
       000000C1            A    30    UART0_REG_DLH:		EQU	UART0_PORT+1	; Divis
       000000C2            A    31    UART0_REG_IIR:		EQU	UART0_PORT+2	; Inter
       000000C2            A    32    UART0_REG_FCT:		EQU	UART0_PORT+2;	; Flow 
       000000C3            A    33    UART0_REG_LCR:		EQU	UART0_PORT+3	; Line 
       000000C4            A    34    UART0_REG_MCR:		EQU	UART0_PORT+4	; Modem
       000000C5            A    35    UART0_REG_LSR:		EQU	UART0_PORT+5	; Line 
       000000C6            A    36    UART0_REG_MSR:		EQU	UART0_PORT+6	; Modem
       000000C7            A    37    UART0_REG_SCR:		EQU 	UART0_PORT+7	; S
                           A    38    
       00004000            A    39    TX_WAIT			EQU	16384 		; Count before 
                           A    40    
       00000080            A    41    UART_LSR_ERR		EQU 	%80		; Error
       00000040            A    42    UART_LSR_ETX		EQU 	%40		; Transmit 
       00000020            A    43    UART_LSR_ETH		EQU	%20		; Transmit hold
       00000001            A    44    UART_LSR_RDY		EQU	%01		; Data ready
                           A    45    
                           A    46    ;For reference, these are the IER bits. MOS onl
       00000001            A    47    UART_IER_RECEIVEINT:				equ 01h		
       00000002            A    48    UART_IER_TRANSMITINT:				equ 02h		
       00000004            A    49    UART_IER_LINESTATUSINT:				equ 04h		
       00000008            A    50    UART_IER_MODEMINT:					equ 08h		
       00000010            A    51    UART_IER_TRANSCOMPLETEINT:			equ 10h		
                           A    52    
                           A    53    			.ASSUME	ADL = 0				
                           A    54    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           B   226    ;
                           A    57    
                           A    58    			SEGMENT CODE
                           A    59    	
                           A    60    			XDEF	_main
                           A    61    
                           A    62    			
                           A    63    
                           A    64    
                           A    65    ; Get a GPIO register
                           A    66    ; Parameters:
                           A    67    ; - REG: Register to test
                           A    68    ; - VAL: Bit(s) to test
                           A    69    ;	
                           A    70    GET_GPIO:		MACRO	REG, VAL
                           A    71    			IN0	A,(REG)
                           A    72    			TST	A, VAL
                           A    73    			ENDMACRO
                           A    74    
                           A    75    ; ASCII
                           A    76    ;
       00000003            A    77    CtrlC:	equ	03h
       0000000D            A    78    cr:	equ	0Dh
       0000000A            A    79    lf:	equ	0Ah
       0000001B            A    80    esc:	equ	1Bh
       0000001A            A    81    CtrlZ:	equ	1Ah
                           A    82    ;
                           A    83    
000145                     A    84    _main:
                           A    85    
000145 CD DF 02            A    86    	call	inline_print
000148 0D0A5369 6D706C65   A    87    	db		cr,lf,'Simple Character I/O test fo
000150 20436861 72616374 
000158 65722049 2F4F2074 
000160 65737420 666F7220 
000168 7465726D 696E616C 
000170 206D6F64 650D0A 
000177 42792053 6861776E   A    88    	db		'By Shawn Sijnstra 16-Sep-2025',cr,
00017F 2053696A 6E737472 
000187 61203136 2D536570 
00018F 2D323032 350D0A 
000196 53776974 6368696E   A    89    	db		'Switching to Terminal Mode',cr,lf,
00019E 6720746F 20546572 
0001A6 6D696E61 6C204D6F 
0001AE 64650D0A 00 
                           A    90    
                           A    91    ;Disable interrupts from UART0
                           A    92    
                           A    93    
0001B3 AF                  A    94    	xor	a
0001B4 ED39C1              A    95    	out0 (UART0_REG_IER), a ; Disable all inter
                           A    96    
0001B7 3E06                A    97    	ld a, 6
0001B9 ED39C2              A    98    	out0 (UART0_REG_FCT), a ; Turn off flow con
                           A    99    
0001BC 3E17                A   100    	ld		a,17h	;outputting due to zero req
0001BE D7                  A   101    	RST		10h		;VDU 23,
0001BF AF                  A   102    	xor		a
0001C0 D7                  A   103    	RST		10h		;0,
0001C1 3D                  A   104    	dec		a
0001C2 D7                  A   105    	RST		10h		;255
                           A   106    
                           A   107    
                           A   108    
0001C3 CD EB 02            A   109    	call	prt_msg
0001C6 53696D70 6C652043   A   110    	db		'Simple Character I/O test for term
0001CE 68617261 63746572 
0001D6 20492F4F 20746573 
0001DE 7420666F 72207465 
0001E6 726D696E 616C206D 
0001EE 6F64650D 0A 
0001F3 42792053 6861776E   A   111    	db		'By Shawn Sijnstra 16-Sep-2025',cr,
0001FB 2053696A 6E737472 
000203 61203136 2D536570 
00020B 2D323032 350D0A 
000212 5465726D 696E616C   A   112    	db		'Terminal mode enabled. Press CTRL-
00021A 206D6F64 6520656E 
000222 61626C65 642E2050 
00022A 72657373 20435452 
000232 4C2D4320 746F2065 
00023A 7869742E 0D0A00 
                           A   113    
000241                     A   114    io_loop:
                           A   115    ;get characters
000241 CD 41 03            A   116    $$:			CALL 		UART0_serial_RX
000244 30 FB               A   117    			JR		NC,$B
000246 B7                  A   118    			or		a
000247 28 F8               A   119    			jr		z,$b
000249 FE03                A   120    			cp		3
00024B 28 0A               A   121    			jr		z,exit
00024D FE1B                A   122    			cp		esc
00024F CA B7 02            A   123    			jp		z,esc_sequence
000252 CD 00 03            A   124    			call	Print_Hex8
000255 18 EA               A   125    			jr	io_loop
                           A   126    
000257                     A   127    exit:
000257 CD DF 02            A   128    	call	inline_print
00025A 0D0A4354 524C2D43   A   129    	db	cr,lf,'CTRL-C detected. Exit to Termina
000262 20646574 65637465 
00026A 642E2045 78697420 
000272 746F2054 65726D69 
00027A 6E616C20 6D6F6465 
000282 2E205072 65737320 
00028A 72657365 74206966 
000292 2070726F 6D707420 
00029A 6661696C 732E0D0A 
0002A2 1B5F2351 2124       A   130    	db	esc,'_#Q!$'		;QUIT out of terminal m
0002A8 00                  A   131    	db	0	;string terminator
                           A   132    
0002A9 3E07                A   133    	ld 		a, 7
0002AB ED39C2              A   134    	out0 	(UART0_REG_FCT), a ; Turn on flow c
                           A   135    
0002AE 3E01                A   136    	ld		a,1				; Restore IER statu
0002B0 ED39C1              A   137    	out0	(UART0_REG_IER),a
                           A   138    
0002B3 210000              A   139    	ld		hl,0	;for Agon = successful exit
0002B6 C9                  A   140    	ret
                           A   141    
0002B7                     A   142    esc_sequence:
0002B7 3E20                A   143    	ld	a,' '			;print ' e' instead of 
0002B9 CD D4 02            A   144    	call	printA
0002BC 3E65                A   145    	ld	a,'e'
0002BE CD D4 02            A   146    	call	printA
0002C1 CD 41 03            A   147    $$:	CALL 		UART0_serial_RX	;Assumes 2 char
0002C4 30 FB               A   148    	JR		NC,$B
0002C6 CD D4 02            A   149    	call	printA
0002C9 CD 41 03            A   150    $$:	CALL 		UART0_serial_RX
0002CC 30 FB               A   151    	JR		NC,$B
0002CE CD D4 02            A   152    	call	printA
0002D1 C3 41 02            A   153    	jp		io_loop
                           A   154    
0002D4                     A   155    printA:
0002D4 F5                  A   156    			PUSH	AF
0002D5 C4 1C 03            A   157    			CALL	NZ, UART0_wait_CTS		; W
0002D8 F1                  A   158    			POP	AF
0002D9 CD 25 03            A   159    $$:			CALL	UART0_serial_TX			; S
0002DC 30 FB               A   160    			JR	NC, $B				; Repeat un
0002DE C9                  A   161    			ret
                           A   162    ;
                           A   163    ;
                           A   164    ; Prints string directly after the call
                           A   165    ;
0002DF E1                  A   166    inline_print:	pop	hl
0002E0 CD E6 02            A   167    	call	print_string
0002E3 E9                  A   168    	jp	(hl)
                           A   169    ;
                           A   170    ; more efficient print string for strings > 1 c
0002E4                     A   171    $$:
0002E4 D7                  A   172    	rst	10h	;Agon uses this to print the charac
0002E5 23                  A   173    	inc	hl
0002E6 7E                  A   174    print_string:	ld	a,(hl)
0002E7 B7                  A   175    	or	a
0002E8 20 FA               A   176    	jr	nz,$b
0002EA C9                  A   177    	ret
                           A   178    ;
0002EB E1                  A   179    prt_msg:	pop	hl
0002EC CD FB 02            A   180    	call	uart0_string
0002EF E9                  A   181    	jp	(hl)
                           A   182    ; more efficient print string for strings > 1 c
0002F0                     A   183    $$:
0002F0 F5                  A   184    			PUSH	AF
0002F1 CD 1C 03            A   185    			CALL	UART0_wait_CTS		; Wait 
0002F4 F1                  A   186    			POP	AF
0002F5 CD 25 03            A   187    inlp:			CALL	UART0_serial_TX			
0002F8 30 FB               A   188    			JR	NC, inlp				; Repea
0002FA 23                  A   189    	inc	hl
0002FB 7E                  A   190    uart0_string:	ld	a,(hl)
0002FC B7                  A   191    	or	a
0002FD 20 F1               A   192    	jr	nz,$b
0002FF C9                  A   193    	ret
                           A   194    
000300 4F                  A   195    Print_Hex8:		LD	C,A
000301 1F                  A   196    			RRA 
000302 1F                  A   197    			RRA 
000303 1F                  A   198    			RRA 
000304 1F                  A   199    			RRA 
000305 CD 09 03            A   200    			CALL	$F 
000308 79                  A   201    			LD	A,C 
000309 E60F                A   202    $$:			AND	0Fh
00030B C690                A   203    			ADD	A,90h
00030D 27                  A   204    			DAA
00030E CE40                A   205    			ADC	A,40h
000310 27                  A   206    			DAA
000311 F5                  A   207    			PUSH	AF
000312 CD 1C 03            A   208    			CALL	UART0_wait_CTS		; Wait 
000315 F1                  A   209    			POP	AF
000316 CD 25 03            A   210    $$:			CALL	UART0_serial_TX			; S
000319 30 FB               A   211    			JR	NC, $B				; Repeat un
00031B C9                  A   212    			RET
                           A   213    ;
                           A   214    ; Check whether we're clear to send (UART0 only
                           A   215    ;
                           A   216    
00031C                     A   217    UART0_wait_CTS:		GET_GPIO	PD_DR, 8		
000322 20 F8               A   218    			JR		NZ, UART0_wait_CTS
000324 C9                  A   219    			RET
                           A   220    
                           A   221    ; Write a character to UART0
                           A   222    ; Parameters:
                           A   223    ; - A: Data to write
                           A   224    ; Returns:
                           A   225    ; - F: C if written
                           A   226    ; - F: NC if timed out
                           A   227    ;
000325 C5                  A   228    UART0_serial_TX:	PUSH		BC			; S
000326 F5                  A   229    			PUSH		AF 			; Stack AF
000327 010040              A   230    			LD		BC,TX_WAIT		; Set CB to
00032A ED38C5              A   231    UART0_serial_TX1:	IN0		A,(UART0_REG_LSR)	
00032D E640                A   232    			AND 		UART_LSR_ETX		; C
00032F 20 09               A   233    			JR		NZ, UART0_serial_TX2	; I
000331 0B                  A   234    			DEC		BC
000332 78                  A   235    			LD		A, B
000333 B1                  A   236    			OR		C
000334 20 F4               A   237    			JR		NZ, UART0_serial_TX1
000336 F1                  A   238    			POP		AF			; We've timed o
000337 C1                  A   239    			POP		BC			; Restore the s
000338 B7                  A   240    			OR		A			; Clear the car
000339 C9                  A   241    			RET	
00033A F1                  A   242    UART0_serial_TX2:	POP		AF			; Good 
00033B ED39C0              A   243    			OUT0		(UART0_REG_THR),A	; W
00033E C1                  A   244    			POP		BC			; Restore BC
00033F 37                  A   245    			SCF					; Set the carry
000340 C9                  A   246    			RET 
                           A   247    ; Read a character from UART0
                           A   248    ; Returns:
                           A   249    ; - A: Data read
                           A   250    ; - F: C if character read
                           A   251    ; - F: NC if no character read
                           A   252    ;
000341 ED38C5              A   253    UART0_serial_RX:	IN0		A,(UART0_REG_LSR)	
000344 E601                A   254    			AND 		UART_LSR_RDY		; C
000346 C8                  A   255    			RET		Z			; Just ret (wit
000347                     A   256    UART0_serial_RX2:
000347 ED38C0              A   257    			IN0		A,(UART0_REG_RBR)	; Read 
00034A 37                  A   258    			SCF 					; Set the c
00034B C9                  A   259    			RET
                           A   260    
                           A   261    
                           A   262    
                           A   263    ;
                           A   264    ; data storage . . .
                           A   265    ;	
                           A   266    
                           A   267    ; uninitialized storage/BSS but can't use that 
                           A   268    ;
                           A   269    ; RAM
                           A   270    ; 
                           A   271    			DEFINE	LORAM, SPACE = ROM
                           A   272    ;			ORDER	__VECTORS, CODE, LORAM
                           A   273    			SEGMENT LORAM
                           A   274    		
                           A   275    ;			SEGMENT	BSS
                           A   276    ;			SEGMENT CODE
                           A   277    
                           A   278    	end


Errors: 0
Warnings: 0
Lines Assembled: 601
